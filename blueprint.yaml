tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://cloudify.co/spec/cloudify/5.0.0/types.yaml
  - plugin:cloudify-azure-plugin
  - plugin:demo-plugin

inputs:
  azure_config:
    description: >
      Parameters for connecting to Azure.
    type: cloudify.datatypes.azure.Config
    default:
      subscription_id: { get_secret: default_azure_subscription_id }
      tenant_id: { get_secret: default_azure_tenant_id }
      client_id: { get_secret: default_azure_client_id }
      client_secret: { get_secret: default_azure_client_secret }

  azure_location:
    description: >
      Azure Location code for creating resources.
    type: string
    default: { get_secret: default_azure_location }

  resource_name_prefix:
    description: >
      Prefix to prepend to resource names.
    type: string

  resource_group_name:
    description: >
      Name of resource group to create for the deployment.
    type: string

  cfy_resource_group_name:
    description: >
      Name of resource group where the Cloudify Manager virtual network
      is located.
    type: string
    default: { get_secret: default_azure_cfy_resource_group_name }

  cfy_vnet_name:
    description: >
      Name of virtual network to create our subnet in.
      This virtual network is expected to exist already - for this demo,
      Cloudify Manager and the new VM share the same virtual network.
    type: string
    default: { get_secret: default_azure_cfy_vnet_name }

  cfy_subnet_name:
    description: >
      Name of subnet to which Cloudify Manager is connected. The new VM
      will have a leg in this subnet.
    type: string
    default: { get_secret: default_azure_cfy_subnet_name }

  public_key_data:
    description: >
      SSH public key to inject to the VM's authorized_keys file.
    type: string
    default: { get_secret: default_public_key_data }

  private_key_path:
    description: >
      Path, on Cloudify Manager, to the private key used to SSH to
      the new VM. This is used in order to install the agent.
    type: string
    default: { get_secret: default_private_key_path }

  content_dir:
    description: >
      Directory to serve contents from.
    type: string
    default: /var/wwwroot

  ftp_username:
    description: >
      Name of user to create for FTP access.
    type: string
    default: test

  min_ftp_port:
    description: >
      Lowest port number to use for FTP PASV mode.
    type: integer
    default: 10000

  max_ftp_port:
    description: >
      Highest  port number to use for FTP PASV mode.
    type: integer
    default: 10100

node_templates:
  deployment:
    type: cloudify.azure.Deployment
    properties:
      azure_config: { get_input: azure_config }
      location: { get_input: azure_location }
      name: { get_input: resource_group_name }
      params:
        location: { get_input: azure_location }
        resource_name_prefix: { get_input: resource_name_prefix }
        cfy_resource_group_name: { get_input: cfy_resource_group_name }
        cfy_vnet_name: { get_input: cfy_vnet_name }
        cfy_subnet_name: { get_input: cfy_subnet_name }
        public_key_data: { get_input: public_key_data }
        min_ftp_port: { get_input: min_ftp_port }
        max_ftp_port: { get_input: max_ftp_port }
        listening_port: { get_property: [ http_server, port ] }
      template_file: 'templates/vm-with-nodejs-ports.json'

  vm:
    type: cloudify.nodes.Compute
    properties:
      ip: { get_attribute: [ deployment, outputs, private_ip, value ] }
      agent_config:
        user: { get_attribute: [ deployment, outputs, admin_user, value ] }
        key: { get_input: private_key_path }
    relationships:
      - type: cloudify.relationships.depends_on
        target: deployment

  vm_init:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/init.sh
          inputs:
            ftp_username: { get_input: ftp_username }
            content_dir: { get_input: content_dir }
    relationships:
      - type: cloudify.relationships.contained_in
        target: vm

  ftp_server:
    type: vsftpd
    properties:
      configuration:
        anonymous_enable: NO
        local_enable: YES
        write_enable: YES
        local_umask: 022
        connect_from_port_20: YES
        ascii_upload_enable: YES
        ascii_download_enable: YES
        ftpd_banner: Welcome
        listen: NO
        listen_ipv6: YES
        pam_service_name: vsftpd
        userlist_enable: YES
        tcp_wrappers: YES
        use_localtime: YES
        pasv_enable: Yes
        pasv_min_port: { get_input: min_ftp_port }
        pasv_max_port: { get_input: max_ftp_port }
        local_root: { get_property: [ http_server, content_dir ] }
        pasv_promiscuous: YES
    relationships:
      - target: vm
        type: cloudify.relationships.contained_in
      - target: vm_init
        type: cloudify.relationships.depends_on

  nodejs:
    type: nodejs
    properties:
      npm_list:
        - http-server
    relationships:
      - target: vm
        type: cloudify.relationships.contained_in
      - target: vm_init
        type: cloudify.relationships.depends_on

  http_server:
    type: nodejs.http_server
    properties:
      content_dir: /var/wwwroot
    relationships:
      - target: vm
        type: cloudify.relationships.contained_in
      - target: nodejs
        type: cloudify.relationships.depends_on

capabilities:
  private_ip:
    value: { get_attribute: [ deployment, outputs, private_ip, value ] }
  public_ip:
    value: { get_attribute: [ deployment, outputs, public_ip, value ] }
  admin_user:
    value: { get_attribute: [ deployment, outputs, admin_user, value ] }
  vm_instance_id:
    value: { get_attribute: [ vm, node_instance_id ] }
  username:
    value: { get_input: ftp_username }
  password:
    value: { get_attribute: [ vm_init, ftp_password ] }
  endpoint:
    value: { concat: [ 'ftp://', { get_attribute: [ deployment, outputs, public_ip, value ] } ] }
  base_url:
    value: { concat: [ 'http://', { get_attribute: [ deployment, outputs, public_ip, value ] }, ':', { get_property: [ http_server, port ] } ] }
